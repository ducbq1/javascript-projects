// Xử lý đồng bộ: thực hiện công việc tuần tự khi hoàn thành xong
// Xử lý đa luồng: mỗi công việc sẽ thực hiện trên một luồng riêng biệt không can thiệp vào luồng chính
// Xử lý bất đồng bộ: khi A bắt đầu thực hiện, chương trình tiếp tục thực hiện B mà không đợi A kết thúc

// 1. Callback Hell

function doAsync(url, onSuccess, onError) {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", url);
    xhr.onload = () => onSuccess(xhr.responseText);
    xhr.onerror = () => onError(xhr.statusText);
    xhr.send();
}

doAsync(
    "http://something.com",
    value => { // value is corresponding with 'xhr.responseText' },
    error => { // error is corresponding with 'xhr.statusText' }
);

doAsync(
    "https://something.com",
    value => {
        doAsync(
            "https://other.com",
            value => {},
            error => {}
        );
    },
    error => {}
);

// 2.Promise

function doAsync(url) {
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.open("GET", url);
        xhr.onload = () => resolve(xhr.responseText);
        xhr.onerror = () => reject(xhr.statusText);
        xhr.send();
    });
}

doAsync("https://something.com")
    .then(value => {})
    .catch(error => {});

doAsync("https://something.com")
    .then(value => {
        return doAsync("https://other.com");
    })
    .then(value => {})
    .catch(error => {});

async function run() {
    let responseText1, responseText2;
    try {
        responseText1 = await doAsync("https://something.com");
        responseText2 = await doAsync("https://other.com");
    } catch(error) {
        // error is corresponding with 'xhr.statusText'
    }
}

run();