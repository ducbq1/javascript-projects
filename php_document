echo '<p>Hello, World</p>'

<?php ?>

<?php phpinfo(); ?>
$_SERVER['HTTP_USER_AGENT']

strpos(), substr(), strlen(), substr_replace(), strval(), echo, print, __toString, strtoupper(), array_merge()
// String may be concatenated using the '.' (dot) operator.

gettype()
is_int()
is_string()
var_dump()
isset()
instanceof()
PHP_INT_SIZE, PHP_INT_MAX, PHP_INT_MIN


<form action="action.php" method="post">
<p>Your name: <input type="text" name="name" /></p>
<p>Your age: <input type="text" name="age" /></p>
</form>

$_GET, $_POST, $_COOKIE, $_SERVER, $_FILE, $_ENV, $_REQUEST, $_SESSION

<?php echo '<?xml version="1.0?>'; ?>

<?php 
	if else: endif;
?>

comment // # /**/

type: bool, int, float, double, string
	array, object, callable, iterable
	resource, NULL
e.g:
$a_bool = TRUE;
$a_str = "foo";
$a_str2 = 'foo';
$an_int = 12;
$a = 1.234;
$b = 7E-10
$d = 1_234.567;

<?php
$a = 1.23456789;
$b = 1.23456780;
$epsilon = 0.00001;

if(abs($a-$b) < $epsilon) {
    echo "true";
}
?>


echo 'this is a simple string';
echo 'this is a double quoted string';
# heredoc
<?php
class foo {
	public $bar = <<<<EOT
bar
EOT;
?>

<?php
// Show all errors
error_reporting(E_ALL);
declare(strict_types=1);

$str = <<<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD;

$juices = array("apple", "orange", "koolaid1" => "purple");

echo "The character at index -2 is $string[-2].".PHP_EOL;
echo "This square is {$square->width}00 centimeters broad.\n";

$instance->$method($variable)
$class::$method($variable)

?>


WHITESPACES      \s*
LNUM             [0-9]+
DNUM             ([0-9]*)[\.]{LNUM}) | ({LNUM}[\.][0-9]*)
EXPONENT_DNUM    (({LNUM} | {DNUM}) [eE][+-]? {LNUM})
INT_NUM_STRING   {WHITESPACES} [+-]? {LNUM} {WHITESPACES}
FLOAT_NUM_STRING {WHITESPACES} [+-]? {EXPONENT_DNUM} {WHITESPACES}
NUM_STRING       ({INT_NUM_STRING} | {FLOAT_NUM_STRING})



$array = array(
	key => value,
	key2 => value2,
	key3 => value3,
	... => ...,
);

$array = [
	key => value,
	key2 => value2,
];


// Array: $arr[] = 54, unset($arr[5]), unset($arr)

print_r(), array_value(), array_keys()

foreach($array as $i => $value) {
	unset($array[$i]);
}




$handle = opendir('.');
while (false !== ($file = readdir($handle))) {
	$files[] = $file;
}
sort($files);
closedir($handle);

$a = array();
$a == null // true
$a === null // false
is_null($a) // false

json_encode()


try {
} catch (TypeError $e) {
}


class Point {
	protected $x, $y;

	public function __contruct($xVal = 0, $yVal = 0) {
		$this->x = $xVal;
		$this->y = $yVal;
	}

	public function getX() {
		return $this->x;
	}
	
	public function getY() {
		return $this->y;
	}
}

variable scope:
function sum() {
	global $a, $b;
	$b = $a + $b;
}

or $GLOBALS['b'] = $GLOBALS['a'] + $GLOBALS['b']


function test() {
	static $a = 0;
	echo $a;
	$a++;
}

include, require, require_one
& operator

// variable variables
$a = 'hello';
$$a = 'world';

HTML Form (GET and POST)
<?php
	echo $_POST['username'];
	echo $_REQUEST['username'];
	setcookie("MyCookie[bar]", 'Testing 2', time() + 3600);
?>

// Dots and spaces in variable names are converted to underscores


<?php
// remove a file from the user's home directory... or maybe
// somebody else's?
unlink ($evil_var);

// Write logging of their access... or maybe an /etc/passwd entry?
fwrite ($fp, $evil_var);

// Execute something trivial.. or rm -rf *?
system ($evil_var);
exec ($evil_var);

?>


define("FOO", "something");
define("__FOO__", "something");



const

Magic constants
__LINE__
__FILE__
__DIR__. This is equivalent to dirname(__FILE__)
__FUNCTION__
__CLASS__
__TRAIT__
__METHOD__
__NAMESPACE__
ClassName::class

ternary operator: '? : '
&& and ||
AND and OR




Operator are used to perform operation.

Operator are mainly divided by three groups.
1.Uniary Operators that takes one values
2.Binary Operators that takes two values
3.ternary operators that takes three values

Operator are mainly divided by three groups that are totally seventeen types.
1.Arithmetic Operator
+ = Addition
- = Subtraction
* = Multiplication
/ = Division
% = Modulo
** = Exponentiation

2.Assignment Operator
     = "equal to

3.Array Operator
    + = Union
    == = Equality
    === = Identity
    != = Inequality
    <> = Inequality
    !== =    Non-identity

4.Bitwise Operator
& = and
^ = xor
| = not
<< = shift left
>> = shift right

5.Comparison Operator
==  = equal
=== = identical
!=  = not equal
!== = not identical
<>  = not equal
< = less than
<= less than or equal
> = greater than
>= = greater than or equal
<=> = spaceship operator

6.Execution Operator
`` = backticks 
PHP supports one execution operator: backticks (``). Note that these are not single-quotes! PHP will attempt to execute the contents of the backticks as a shell command; the output will be returned (i.e., it won't simply be dumped to output; it can be assigned to a variable). Use of the backtick operator is identical to shell_exec().



7.Error Control Operator
    @ = at sign

8.Incrementing/Decrementing Operator
    ++$a = PreIncrement
    $a++ = PostIncrement
    --$a = PreDecrement
    $a-- = Postdecrement

9.Logical Operator
    && = And
    || = Or
    ! = Not
    and = And
    xor = Xor
    or = Or

10.string Operator
    . =  concatenation operator
    .= concatenating assignment operator

11.Type Operator
    instanceof = instanceof

12.Ternary or Conditional operator
   ?: = Ternary operator

13.Null Coalescing Operator
    ??" = null coalescing

14.Clone new Operator
    clone new = clone new

15.yield from Operator

    yield from = yield from

16.yield Operator
    yield = yield

17.print Operator
    print = print




<?php
/* Intentional file error */
$my_file = @file ('non_existent_file') or
    die ("Failed opening file: error was '" . error_get_last()['message'] . "'");

// this works for any expression, not just functions:
$value = @$cache[$key];
// will not issue a notice if the index $key doesn't exist.

?>


(@include("file.php"))
OR die("Could not find file.php!");




Anonymous functions
echo preg_replace_callback('~-([a-z])~', function ($match) {
	return strtoupper($match[1]);
}, 'hello-world');




$message = 'hello';

// No "use"
$example = function () {
    var_dump($message);
};
$example();

// Inherit $message
$example = function () use ($message) {
    var_dump($message);
};
$example();




<?php
// A basic shopping cart which contains a list of added products
// and the quantity of each product. Includes a method which
// calculates the total price of the items in the cart using a
// closure as a callback.
class Cart
{
    const PRICE_BUTTER  = 1.00;
    const PRICE_MILK    = 3.00;
    const PRICE_EGGS    = 6.95;

    protected $products = array();
    
    public function add($product, $quantity)
    {
        $this->products[$product] = $quantity;
    }
    
    public function getQuantity($product)
    {
        return isset($this->products[$product]) ? $this->products[$product] :
               FALSE;
    }
    
    public function getTotal($tax)
    {
        $total = 0.00;
        
        $callback =
            function ($quantity, $product) use ($tax, &$total)
            {
                $pricePerItem = constant(__CLASS__ . "::PRICE_" .
                    strtoupper($product));
                $total += ($pricePerItem * $quantity) * ($tax + 1.0);
            };
        
        array_walk($this->products, $callback);
        return round($total, 2);
    }
}

$my_cart = new Cart;

// Add some items to the cart
$my_cart->add('butter', 1);
$my_cart->add('milk', 3);
$my_cart->add('eggs', 6);

// Print the total with a 5% sales tax.
print $my_cart->getTotal(0.05) . "\n";
// The result is 54.29
?>

<?php
$link = mysqli_connect("127.0.0.1", "my_user", "my_password", "my_db");

if (!$link) {
    echo "Error: Unable to connect to MySQL." . PHP_EOL;
    echo "Debugging errno: " . mysqli_connect_errno() . PHP_EOL;
    echo "Debugging error: " . mysqli_connect_error() . PHP_EOL;
    exit;
}

echo "Success: A proper connection to MySQL was made! The my_db database is great." . PHP_EOL;
echo "Host information: " . mysqli_get_host_info($link) . PHP_EOL;

mysqli_close($link);
?>

arrow functions
(argument_list) => expr


Control Structures:
if, else, elseif, endif
while, do-while
for, foreach, break, continue, 
switch-case
return, require -> E_ERROR, include -> E_WARNING, require_once, include_once, goto

$expressionResult = match ($condition) {
	1, 2 => foo(), 
	3, 4 => bar(),
	default => baz(),
};

declare(ticks=1);
declare(encoding='ISO-8859-1');

include 'http://www.example.com/file.php?foo=1&bar=2';
include(dirname(__FILE__));

<?php
$string = get_include_contents('somefile.php');

function get_include_contents($filename) {
    if (is_file($filename)) {
        ob_start();
        include $filename;
        return ob_get_clean();
    }
    return false;
}

?>

define('__ROOT__', dirname(dirname(__FILE__)));
require_once(__ROOT__ . '/config.php');


namespace

<?php 
namespace foo;
class Cat {
	static function says() {
		echo 'meow';
	}
}
?>


<?php
function inverse($x) {
    if (!$x) {
        throw new Exception('Division by zero.');
    }
    return 1/$x;
}

try {
    echo inverse(5) . "\n";
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

// Continue execution
echo "Hello World\n";
?>



<?php
function inverse($x) {
    if (!$x) {
        throw new Exception('Division by zero.');
    }
    return 1/$x;
}

try {
    echo inverse(5) . "\n";
} catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
} finally {
    echo "First finally.\n";
}

try {
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
} finally {
    echo "Second finally.\n";
}

// Continue execution
echo "Hello World\n";
?>


# yield (generator syntax)

<?php
function gen_one_to_three() {
    for ($i = 1; $i <= 3; $i++) {
        // Note that $i is preserved between yields.
        yield $i;
    }
}

$generator = gen_one_to_three();
foreach ($generator as $value) {
    echo "$value\n";
}
?>












